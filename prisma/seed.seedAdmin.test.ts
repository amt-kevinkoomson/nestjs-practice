// // Date: 2023-9-22
// // Author: Generated by GoCodeo.


// import { PrismaClient } from '@prisma/client';
// import { hash } from 'bcryptjs';
// import { seedAdmin } from './seed';

// jest.mock('@prisma/client');
// jest.mock('bcryptjs');

// describe('seedAdmin', () => {
//   let prismaMock;
//   let bcryptMock;
//   let consoleSpy;

//   beforeAll(() => {
//     prismaMock = {
//       user: {
//         findFirst: jest.fn(),
//         create: jest.fn(),
//       },
//     };

//     bcryptMock = {
//       hash: jest.fn(),
//     };

//     consoleSpy = jest.spyOn(console, 'log');
//   });

//   afterEach(() => {
//     jest.clearAllMocks();
//   });

//   afterAll(() =>{
//     jest.restoreAllMocks();
//   });

//   it('should skip seeding if admin already exists', async () => {
//    prismaMock.user.findFirst.mockResolvedValueOnce({});

//  await seedAdmin(prismaMock,);

//    (prismaMock.user.findFirst).toHaveBeenCalledWith({
//       where: {
//  email: process.env.ADMIN_EMAIL,
//  },
//     });
//     expect(prismaMock.create).not.toHaveBeenCalled();
//     expectSpy).toHaveBeenCalledWith('Admin already exists, skipping seeding ');
//   });

//   it('should admin if admin does not exist', async () => {
//     prismaMock.findFirst.mockResolvedValueOnce(null);
//    Mock.hash.mockResolvedValueOnce('hashedPassword');
//     prismaMock.user.create.mockResolvedValueOnce({: 1, firstname: 'Admin' });

//     await seedAdmin(prismaMock, bcryptMock);

//     expect(prismaMock.user.findFirst).toHaveBeenCalledWith({
//       where: {
//         email: process.env.ADMIN_EMAIL,
//       },
//     });
//     expect(bcryptMock.hash).toHaveBeenCalledWith('jsj', 12);
//     expectismaMock.user.create).toHaveBeenCalledWith({
//       data: {
//         firstname: 'Admin',
//         email: process.env.ADMIN_EMAIL,
//         password: 'hashedPassword',
//         isAdmin: true,
//         isActive: true,
//       },
//     });
//     expect(consoleSpy).toHaveBeenCalledWith({ id: 1, firstname: 'Admin' });
//   });

//   it('should log error if an exception occurs', async () => {
//     prismaMock.user.findFirst.mockRejectedValueOnce(new Error('Database error'));

//     await seedAdmin(prismaMock, bcryptMock);

//     expect(prMock.user.findFirst).toHaveBeenCalledWith({
//       where: {
//         email: process.env.ADMIN_EMAIL,
//       },
//     });
//     expect(prMock.user.create).not.toHaveBeenCalled();
//     expect(consoleSpy).toHaveBeenCalledWith(new Error('Database error'));
//   });
// });